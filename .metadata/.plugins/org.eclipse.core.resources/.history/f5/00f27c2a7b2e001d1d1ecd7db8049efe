package com.gft.db;


import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.gft.db.mapper.StudentMapper;
import com.gft.db.model.StudentModel;
import com.gft.entities.Student;
import com.gft.usecases.adapter.StudentAdapter;
 
public class StudentAdapterImpl implements StudentAdapter {
 
	@Autowired
	private StudentRepository studentRepository;
 
	@Override
	public Student findByName(String name) {
		StudentModel findByName = studentRepository.findByName(name);
 
		return StudentMapper.toEntity(findByName);
	}

	@Override
	public <S extends StudentModel> S save(S entity) {
		return studentRepository.save(entity);
	}

	@Override
	public <S extends StudentModel> Optional<S> findOne(Example<S> example) {
		return studentRepository.findOne(example);
	}

	@Override
	public Page<StudentModel> findAll(Pageable pageable) {
		return studentRepository.findAll(pageable);
	}

	@Override
	public List<StudentModel> findAll() {
		return studentRepository.findAll();
	}

	@Override
	public List<StudentModel> findAll(Sort sort) {
		return studentRepository.findAll(sort);
	}

	@Override
	public List<StudentModel> findAllById(Iterable<Long> ids) {
		return studentRepository.findAllById(ids);
	}

	@Override
	public <S extends StudentModel> List<S> saveAll(Iterable<S> entities) {
		return studentRepository.saveAll(entities);
	}

	@Override
	public Optional<StudentModel> findById(Long id) {
		return studentRepository.findById(id);
	}

	@Override
	public void flush() {
		studentRepository.flush();
	}

	@Override
	public <S extends StudentModel> S saveAndFlush(S entity) {
		return studentRepository.saveAndFlush(entity);
	}

	@Override
	public boolean existsById(Long id) {
		return studentRepository.existsById(id);
	}

	@Override
	public void deleteInBatch(Iterable<StudentModel> entities) {
		studentRepository.deleteInBatch(entities);
	}

	@Override
	public <S extends StudentModel> Page<S> findAll(Example<S> example, Pageable pageable) {
		return studentRepository.findAll(example, pageable);
	}

	@Override
	public void deleteAllInBatch() {
		studentRepository.deleteAllInBatch();
	}

	@Override
	public StudentModel getOne(Long id) {
		return studentRepository.getOne(id);
	}

	@Override
	public <S extends StudentModel> long count(Example<S> example) {
		return studentRepository.count(example);
	}

	@Override
	public <S extends StudentModel> boolean exists(Example<S> example) {
		return studentRepository.exists(example);
	}

	@Override
	public <S extends StudentModel> List<S> findAll(Example<S> example) {
		return studentRepository.findAll(example);
	}

	@Override
	public long count() {
		return studentRepository.count();
	}

	@Override
	public void deleteById(Long id) {
		studentRepository.deleteById(id);
	}

	@Override
	public <S extends StudentModel> List<S> findAll(Example<S> example, Sort sort) {
		return studentRepository.findAll(example, sort);
	}

	@Override
	public void delete(StudentModel entity) {
		studentRepository.delete(entity);
	}

	@Override
	public void deleteAll(Iterable<? extends StudentModel> entities) {
		studentRepository.deleteAll(entities);
	}

	@Override
	public void deleteAll() {
		studentRepository.deleteAll();
	}

}