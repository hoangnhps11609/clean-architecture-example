package com.gft.usecases.adapter;

import java.util.List;
import java.util.Optional;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.gft.entities.Student;
 
public interface StudentAdapter {

	void deleteAll();

	void deleteAll(Iterable<? extends Student> entities);

	void delete(Student entity);

	<S extends Student> List<S> findAll(Example<S> example, Sort sort);

	void deleteById(Long id);

	long count();

	<S extends Student> List<S> findAll(Example<S> example);

	<S extends Student> boolean exists(Example<S> example);

	<S extends Student> long count(Example<S> example);

	Student getOne(Long id);

	void deleteAllInBatch();

	<S extends Student> Page<S> findAll(Example<S> example, Pageable pageable);

	void deleteInBatch(Iterable<Student> entities);

	boolean existsById(Long id);

	<S extends Student> S saveAndFlush(S entity);

	void flush();

	Optional<Student> findById(Long id);

	<S extends Student> List<S> saveAll(Iterable<S> entities);

	List<Student> findAllById(Iterable<Long> ids);

	List<Student> findAll(Sort sort);

	List<Student> findAll();

	Page<Student> findAll(Pageable pageable);

	<S extends Student> Optional<S> findOne(Example<S> example);

	<S extends Student> S save(S entity);

	Student findByName(String name);
 
}